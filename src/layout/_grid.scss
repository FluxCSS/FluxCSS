// Mixin pour les breakpoints
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    } @else {
        @content;
    }
}

// Mixin pour générer les colonnes
@mixin generate-columns($breakpoint: null) {
    @for $i from 1 through 12 {
        &.s#{$breakpoint}-#{$i} {
            flex: 0 0 percentage($i / 12);
            max-width: percentage($i / 12);
        }
    }
}
// Mixin pour générer les classes d'ordre
@mixin generate-orders($breakpoint: null) {
    @for $i from 1 through 12 {
        &.order#{$breakpoint}-#{$i} {
            order: $i;
        }
    }
}
// Mixin pour créer un conteneur
@mixin make-container {
    width: 100%;
    padding-inline: calc($spacer / 2);
    margin-inline: auto;
}

/*****************************************
*          Container system              *
*****************************************/
.container {
    @include make-container;
}

.container-fixed {
    @include make-container;

    @each $breakpoint, $width in $containers-width {
        @include respond-to($breakpoint) {
            max-width: $width;
        }
    }
}

/*****************************************
*           Flexbox system               *
*****************************************/
.row {
    display: flex;
    flex-wrap: wrap;
    margin-inline: calc(0px - $spacer / 2);
}

.col {
    padding-inline: calc($spacer / 2);

    // Par défaut, prend toute la largeur en dessous du premier breakpoint
    flex: 0 0 100%;
    max-width: 100%;

    @include generate-columns();
    @include generate-orders();

    @each $breakpoint, $width in $containers-width {
        @include respond-to($breakpoint) {
            @include generate-columns(-#{$breakpoint});
            @include generate-orders(-#{$breakpoint});
        }
    }
}

/*****************************************
*           CSS Grid system              *
*****************************************/
@mixin make-grid-container($columns) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $spacer;
}

@mixin responsive-grid-columns($breakpoint, $columns) {
    @include respond-to($breakpoint) {
        grid-template-columns: repeat($columns, 1fr);
    }
}

.grid {
    @include make-grid-container(12);

    @each $breakpoint, $width in $containers-width {
        @include responsive-grid-columns($breakpoint, 12);
    }
}

.g-col {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: $spacer;

    // Par défaut, prend toute la largeur en dessous du premier breakpoint
    grid-column: span 12;

    @for $i from 1 through 12 {
        &.s-#{$i} {
            grid-column: span $i;
        }
    }

    @each $breakpoint, $width in $containers-width {
        @include respond-to($breakpoint) {
            @for $i from 1 through 12 {
                &.s-#{$breakpoint}-#{$i} {
                    grid-column: span $i;
                }
            }
        }
    }
}