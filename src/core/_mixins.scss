// Mixins for reusable CSS rules

// Mixin for responsive breakpoints
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    } @else {
        @warn "Invalid breakpoint: #{$breakpoint}";
    }
}

// Mixin for creating a flexible container
@mixin make-container($max-width: 100%) {
    width: 100%;
    padding-right: calc($spacer / 2);
    padding-left: calc($spacer / 2);
    margin-right: auto;
    margin-left: auto;

    @include respond-to(sm) {
        max-width: $max-width;
    }
}

// Fonction pour calculer la luminance relative selon WCAG
@function luminance($color) {
    $red: red($color) / 255;
    $green: green($color) / 255;
    $blue: blue($color) / 255;

    $red: if($red <= 0.03928, $red / 12.92, pow(($red + 0.055) / 1.055, 2.4));
    $green: if($green <= 0.03928, $green / 12.92, pow(($green + 0.055) / 1.055, 2.4));
    $blue: if($blue <= 0.03928, $blue / 12.92, pow(($blue + 0.055) / 1.055, 2.4));

    @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

// Fonction pour déterminer le rapport de contraste
@function contrast-ratio($bg, $text) {
    $bg-luminance: luminance($bg) + 0.05;
    $text-luminance: luminance($text) + 0.05;

    @return if($bg-luminance > $text-luminance,
            $bg-luminance / $text-luminance,
            $text-luminance / $bg-luminance);
}

// Fonction pour choisir entre texte blanc ou noir basé sur le meilleur contraste
@function get-contrast-color($bg-color) {
    $contrast-white: contrast-ratio($bg-color, white);
    $contrast-black: contrast-ratio($bg-color, black);

    @return if($contrast-white >= $contrast-black, white, black);
}


// Fonction pour obtenir une teinte plus foncée pour le hover de façon sécurisée
@function get-hover-color($color, $amount: 10%) {
    @if type-of($color) != color {
        @error "La valeur #{$color} n'est pas une couleur valide";
        @return #000000;
    }

    // Pour les couleurs très claires, utiliser une approche différente
    $lightness: lightness($color);
    @if $lightness > 90% {
        // Utiliser mix au lieu de darken pour les couleurs très claires
        @return mix(black, $color, $amount * 2);
    } @else {
        @return darken($color, $amount);
    }
}

// Fonction pour obtenir une teinte encore plus foncée pour le active
@function get-active-color($color, $amount: 15%) {
    @if type-of($color) != color {
        @error "La valeur #{$color} n'est pas une couleur valide";
        @return #000000;
    }

    // Pour les couleurs très claires, utiliser une approche différente
    $lightness: lightness($color);
    @if $lightness > 90% {
        // Utiliser mix au lieu de darken pour les couleurs très claires
        @return mix(black, $color, $amount * 2);
    } @else {
        @return darken($color, $amount);
    }
}

// Mixin to generate border classes for different widths
@mixin generate-border-widths($sides, $widths) {
    @each $side-name, $side-prop in $sides {
        @each $width-name, $width-value in $widths {
            @if ($side-prop == '') {
                // Class for all sides with a specific width
                .b-#{$width-name} {
                    border-width: $width-value !important;
                }
            } @else {
                // Class for a specific side with a specific width
                .b#{$side-name}-#{$width-name} {
                    @if $side-prop == 'start' {
                        border-inline-start-width: $width-value !important;
                    } @else if $side-prop == 'end' {
                        border-inline-end-width: $width-value !important;
                    } @else {
                        border-#{$side-prop}-width: $width-value !important;
                    }
                }
            }
        }
    }
}

// Mixin to generate negative border classes
@mixin generate-negative-borders($sides) {
    @each $side-name, $side-prop in $sides {
        @if ($side-prop != '') {
            .b#{$side-name}-0 {
                @if $side-prop == 'start' {
                    border-inline-start: none;
                } @else if $side-prop == 'end' {
                    border-inline-end: none;
                } @else {
                    border-#{$side-prop}: none;
                }
            }
        }
    }
}

// Mixin to generate shadow size classes
@mixin generate-shadow-sizes($sizes) {
    @each $size-name, $size-value in $sizes {
        .sh-#{$size-name} {
            --#{$prefix}-shadow-size: #{$size-value};
        }
    }
}


// Mixin to generate shadow color classes
@mixin generate-shadow-colors($colors, $opacities) {
    @each $color-name, $color-value in $colors {
        @each $opacity-name, $opacity-value in $opacities {
            .sh-#{$color-name}-#{$opacity-name} {
                $opacity-color: rgba($color-value, $opacity-value);
                --#{$prefix}-shadow-color: #{$opacity-color};
            }
        }
        .sh-#{$color-name} {
            --#{$prefix}-shadow-color: #{$color-value};
        }

    }
}

// Mixin to generate shadow color classes
@mixin generate-border-colors($colors, $opacities) {
    @each $color-name, $color-value in $colors {
        @each $opacity-name, $opacity-value in $opacities {
            .b-#{$color-name}-#{$opacity-name} {
                $opacity-color: rgba($color-value, $opacity-value);
                --#{$prefix}-border-color: #{$opacity-color};
            }
        }
        .b-#{$color-name} {
            --#{$prefix}-border-color: #{$color-value};
        }
    }
}

// Mixin for tables border
@mixin border($color) {
    border: 1px solid $color;
}

// Mixin for generating table styles based on color
@mixin table-color-variant($color-name, $color) {
    .table-#{$color-name} {
        th {
            background-color: $color;
            color: darken($color, 60%);
        }

        // Striped rows dependent on color
        &.table-striped tbody tr {
            &:nth-child(even) {
                background-color: lighten($color, 25%);
            }
        }

        // Hover effect dependent on color
        &.table-hover tbody tr {
            &:hover {
                background-color: lighten($color, 20%);
            }
        }
    }
}


// Mixin for generating accordion color variants
@mixin accordion-color-variant($color-name, $color) {
    .accordion-#{$color-name} {
        details summary {
            background-color: lighten($color, 30%);
            color: darken($color, 30%);
        }

        details[open] summary {
            background-color: darken(lighten($color, 30%), 5%);
        }

        details summary::after {
            color: darken($color, 30%);
        }

        details[open] summary::after {
            color: darken($color, 30%);
        }

        .accordion-body {
            background-color: lighten($color, 45%);
            color: darken($color, 30%);
        }
    }
}

// Mixin to generate display utilities
@mixin generate-display-utilities($breakpoint: null) {
    @each $name, $value in $displays {
        @if ($breakpoint == null) {
            .d-#{$name} {
                display: $value !important;
            }
        } @else {
            @media (min-width: map-get($breakpoints, $breakpoint)) {
                .d-#{$breakpoint}-#{$name} {
                    display: $value !important;
                }
            }
        }
    }
}


// Mixin for generating navbar color variants
@mixin navbar-color-variant($color-name, $color) {
    .navbar-#{$color-name} {
        background-color: $color;
        color: get-contrast-color($color);

        .nav-item {
            &:hover {
                background-color: darken($color, 10%);
                color: get-contrast-color(darken($color, 10%));
            }
        }

        .burger-icon {
            background-color: get-contrast-color($color);
        }

        .nav-list {
            background-color: $color;
            color: get-contrast-color($color);
        }
    }
}

// Mixin to generate flex-direction classes
@mixin generate-flex-directions($breakpoint: null) {
    $directions: (
            "row": row,
            "row-reverse": row-reverse,
            "column": column,
            "column-reverse": column-reverse
    );

    @each $name, $value in $directions {
        @if $breakpoint == null {
            .dir-#{$name} {
                flex-direction: $value !important;
            }
        } @else {
            .dir-#{$breakpoint}-#{$name} {
                flex-direction: $value !important;
            }
        }
    }
}
